/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        unordered_map<int,TreeNode*>mp;
        unordered_map<int,int>p,c;
        for(int i=0;i<descriptions.size();i++){
            if(mp.find(descriptions[i][0])==mp.end()){
                TreeNode* temp=new TreeNode(descriptions[i][0]);
                mp[descriptions[i][0]]=temp;
            }
            if(mp.find(descriptions[i][1])==mp.end()){
                TreeNode* temp=new TreeNode(descriptions[i][1]);
                mp[descriptions[i][1]]=temp;
            }
            if(descriptions[i][2]==1){
                mp[descriptions[i][0]]->left=mp[descriptions[i][1]];
                p[descriptions[i][0]]++;
                c[descriptions[i][1]]++;
            }
            else{
                mp[descriptions[i][0]]->right=mp[descriptions[i][1]];
                p[descriptions[i][0]]++;
                c[descriptions[i][1]]++;
            }
        }
        for(auto a :mp){
            if(p[a.first]!=0 && c[a.first]==0){
                return a.second;
            }
        }
        return NULL;
    }
};
